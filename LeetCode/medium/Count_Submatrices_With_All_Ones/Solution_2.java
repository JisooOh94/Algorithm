package medium.Count_Submatrices_With_All_Ones;

import java.util.Arrays;

import org.junit.Test;

/**
 * Runtime : 19ms(47.17%)
 * Memory : 40.4mb(100.00%)
 */
public class Solution_2 {
	@Test
	public void test() {
		int[][][] mat = new int[][][]{
				{
						{1, 0, 1},
						{1, 1, 0},
						{1, 1, 0}
				},
				{
						{0, 1, 1, 0},
						{0, 1, 1, 1},
						{1, 1, 1, 0}
				},
				{
						{1, 0, 1},
						{0, 1, 0},
						{1, 0, 1}
				},
				{
						{0, 1, 1, 1},
						{1, 1, 0, 1},
						{1, 1, 0, 0},
						{1, 1, 1, 1},
						{0, 1, 0, 0}
				},
				{        //96
						{1, 1, 1, 1, 0, 1, 0},
						{1, 1, 1, 0, 0, 0, 1},
						{0, 1, 1, 1, 1, 0, 0},
						{1, 1, 0, 1, 1, 0, 1},
						{1, 0, 0, 0, 0, 0, 1},
						{1, 1, 0, 1, 1, 1, 1},
						{1, 1, 0, 0, 1, 1, 1}
				},
				{        //82
						{1, 0, 0, 1, 0, 1, 0, 1},
						{1, 0, 1, 1, 0, 1, 0, 0},
						{1, 1, 1, 0, 1, 0, 0, 1},
						{0, 0, 1, 1, 1, 1, 0, 0},
						{0, 0, 1, 1, 1, 1, 0, 1},
						{1, 1, 0, 1, 1, 1, 0, 0}
				},
				{    //122
						{1, 1, 0, 1, 1, 1, 1, 0, 1},
						{0, 1, 1, 1, 1, 0, 1, 1, 0},
						{1, 0, 0, 0, 0, 1, 1, 1, 1},
						{0, 0, 1, 0, 1, 1, 1, 1, 1},
						{0, 0, 0, 1, 0, 1, 1, 1, 1},
						{0, 0, 1, 0, 0, 1, 0, 1, 0}
				},
				{
						{1, 1, 0, 1},
						{1, 0, 1, 0},
						{1, 0, 1, 1},
						{1, 1, 1, 0},
						{1, 1, 1, 1},
						{1, 1, 1, 1}
				},
				{
						{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1},
						{0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0},
						{1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
						{0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0},
						{1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
						{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1},
						{1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1},
						{0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1},
						{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0}
				},
				{
						{0, 1, 1, 1, 1, 0},
						{1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 1, 1}
				}
		};

		for (int i = 0; i < mat.length; i++) {
			System.out.println(numSubmat(mat[i]));
		}
	}

	public int numSubmat(int[][] mat) {
		int height = mat.length;
		int width = mat[0].length;
		int squareCnt = 0;

		for (int y = 0; y < height; y++) {
			int[] accum = new int[width];
			Arrays.fill(accum, 1);

			int max = 0;
			for (int h = y; h < height; h++) {
				int length = 0;
				for (int x = 0; x < width; x++) {
					accum[x] = Math.min(accum[x], mat[h][x]);
					max = Math.max(max, accum[x]);
					length = accum[x] == 0 ? 0 : length + 1;
					squareCnt += length;
				}
				if(max == 0) break;
			}
		}
		return squareCnt;
	}
}

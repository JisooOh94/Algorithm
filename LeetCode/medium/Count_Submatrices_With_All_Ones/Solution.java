package medium.Count_Submatrices_With_All_Ones;

import org.junit.Test;

/**
 * failed
 */
public class Solution {
	@Test
	public void test() {
		int[][][] mat = new int[][][]{
				{
						{1, 0, 1},
						{1, 1, 0},
						{1, 1, 0}
				},
				{
						{0, 1, 1, 0},
						{0, 1, 1, 1},
						{1, 1, 1, 0}
				},
				{
						{1, 0, 1},
						{0, 1, 0},
						{1, 0, 1}
				},
				{
						{0, 1, 1, 1},
						{1, 1, 0, 1},
						{1, 1, 0, 0},
						{1, 1, 1, 1},
						{0, 1, 0, 0}
				},
				{        //96
						{1, 1, 1, 1, 0, 1, 0},
						{1, 1, 1, 0, 0, 0, 1},
						{0, 1, 1, 1, 1, 0, 0},
						{1, 1, 0, 1, 1, 0, 1},
						{1, 0, 0, 0, 0, 0, 1},
						{1, 1, 0, 1, 1, 1, 1},
						{1, 1, 0, 0, 1, 1, 1}
				},
				{        //82
						{1, 0, 0, 1, 0, 1, 0, 1},
						{1, 0, 1, 1, 0, 1, 0, 0},
						{1, 1, 1, 0, 1, 0, 0, 1},
						{0, 0, 1, 1, 1, 1, 0, 0},
						{0, 0, 1, 1, 1, 1, 0, 1},
						{1, 1, 0, 1, 1, 1, 0, 0}
				},
				{    //122
						{1, 1, 0, 1, 1, 1, 1, 0, 1},
						{0, 1, 1, 1, 1, 0, 1, 1, 0},
						{1, 0, 0, 0, 0, 1, 1, 1, 1},
						{0, 0, 1, 0, 1, 1, 1, 1, 1},
						{0, 0, 0, 1, 0, 1, 1, 1, 1},
						{0, 0, 1, 0, 0, 1, 0, 1, 0}
				},
				{
						{1, 1, 0, 1},
						{1, 0, 1, 0},
						{1, 0, 1, 1},
						{1, 1, 1, 0},
						{1, 1, 1, 1},
						{1, 1, 1, 1}
				},
				{
						{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1},
						{0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0},
						{1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
						{0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0},
						{1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
						{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1},
						{1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1},
						{0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1},
						{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0}
				},
				{
						{0, 1, 1, 1, 1, 0},
						{1, 1, 1, 1, 1, 1},
						{1, 1, 1, 1, 1, 1}
				}
		};

		for(int i = 0; i < mat.length; i++) {
			System.out.println(numSubmat(mat[i]));
		}
	}

	public int numSubmat(int[][] mat) {
		int row = mat.length;
		int col = mat[0].length;
		int[][][] cache = new int[row + 1][col + 1][5];
		int squareCnt = 0;

		for(int y = 0; y < row; y++) {
			for(int x = 0; x < col; x++) {
				if(mat[y][x] == 0) continue;

				cache[y + 1][x + 1][0] = x == 0 || mat[y][x - 1] == 0 ? 0 : cache[y + 1][x][0] + 1;
				cache[y + 1][x + 1][2] = y == 0 || mat[y - 1][x] == 0 ? 0 : cache[y][x + 1][2] + 1;
				cache[y + 1][x + 1][1] = y == 0 || mat[y - 1][x] == 0 || x == 0 || mat[y][x - 1] == 0 || mat[y - 1][x - 1] == 0 ? 0 : cache[y + 1][x][1] + Math.min(cache[y + 1][x][4], cache[y + 1][x + 1][2]);
				cache[y + 1][x + 1][3] = x == 0 || mat[y][x - 1] == 0 || y == 0 || mat[y - 1][x] == 0 || mat[y - 1][x - 1] == 0 ? 0 : cache[y][x + 1][3] + Math.min(cache[y][x + 1][4], cache[y + 1][x + 1][0]);
				cache[y + 1][x + 1][4] = y == 0 || x == 0 || mat[y - 1][x - 1] == 0 || mat[y][x - 1] == 0 || mat[y - 1][x] == 0 ? 0 : cache[y + 1][x +1][0] <= cache[y][x][4] || cache[y + 1][x + 1][2] <= cache[y][x][4] ? cache[y][x][4] : cache[y][x][4] + 1;

				squareCnt += cache[y + 1][x + 1][0] + cache[y + 1][x + 1][1] + cache[y + 1][x + 1][2] + cache[y + 1][x + 1][3] + cache[y + 1][x + 1][4] + 1;;
			}
		}

		return squareCnt;
	}
}
